import { supabase, supabaseConfig } from "@app/config/supabase.config";

// Supabaseサービスのベースクラス
export class SupabaseService {
  protected static client = supabase;

  // 接続テスト: Auth ヘルスチェックエンドポイントに対してGETし、200なら接続OKと判定
  static async testConnection(): Promise<boolean> {
    try {
      // If env is not configured, don't attempt any network call
      if (!supabaseConfig?.isConfigured) return false;
      // Single source of truth: supabaseConfig.url
      const baseUrl = supabaseConfig.url;
      if (!baseUrl) return false;

      const controller = new AbortController();
      const timeout = setTimeout(() => controller.abort(), 7000);

      const res = await fetch(`${baseUrl}/auth/v1/health`, {
        method: "GET",
        headers: { Accept: "application/json" },
        signal: controller.signal,
      }).catch((err) => {
        console.error("Health check request error:", err);
        return undefined;
      });

      clearTimeout(timeout);

      if (!res) return false;
      const ok = res.ok;
      if (ok) console.log("Supabase health endpoint reachable");
      else
        console.error("Supabase health endpoint returned non-OK:", res.status);
      return ok;
    } catch (error) {
      console.error("Supabase connection test error:", error);
      return false;
    }
  }

  // データベースの基本情報を取得
  static async getDatabaseInfo() {
    try {
      const { data, error } = await this.client.rpc("version");

      if (error) {
        console.error("Failed to get database info:", error);
        return null;
      }

      return data;
    } catch (error) {
      console.error("Database info error:", error);
      return null;
    }
  }
}

export default SupabaseService;


